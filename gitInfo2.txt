
远程仓库
本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：
ssh-keygen -t rsa -C "ltytuotuo@gmail.com"

登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：
要关联一个远程库
git remote add origin git@github.com:tuouo/git.git(首次会有一些问题)
git push -u origin master	(master 表示当前分支，所有内容)
以后可以省去 -u参数
git push origin master

假如你无法推送分支，并且报错：
git pull origin master要先用git pull拉取一下远程分支：
确切地说是因为远程的commit比你本地的commit要新：
本地：commitA -> commitB -> commitC
远程：commitA -> commitB -> commitX -> commitY
所以要先pull，把commitX和commitY取到本地

从远程库克隆
git clone git@github.com:tuouo/gitForLocalTest.git
这样repository 克隆到执行该命令时所在的文件路径下。



分支管理
创建分支，并切换到该分支。
git checkout -b dev		(新创建的分支名为dev)
该命令相当于一下两条命令的组合
git branch dev 			(新建分支)
git checkout dev		(切换到某分支)

git branch				(查看分支，当前分支有*前缀)

只能在master分支上，合并dev分支的进度   #当时测试结果，应该有问题
git checkout master
git merge dev

git branch -d dev
合并完后可以删除dev分支，且不能删除当前所在的分支
即，在dev分支上，不能删除dev分支。
主分支上的新建分支可以由第三方分支删去。
不能删除未merge的分支。git branch -D dev加强命令可以删除。
git branch -d dev1 dev2		(一起删除多个分支)

因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，
合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。

merge 某一分支的两个版本号之间的内容
先创建两个版本号之间的diff，注意顺序：
git diff f1a2c3 a8c7e6 > my.diff
再直接把diff文件合并：
git apply my.diff

分支管理策略
通常，合并分支时，如果可能，Git会用Fast forward模式，
但这种模式下，删除分支后，会丢掉分支信息。
如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，
这样，从分支历史上就可以看出分支信息。
git merge --no-ff -m "Info" dev
因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。

基本原则进行分支管理：
1,master 分支非常稳定，仅仅用来发布新版本。
2，每个人都在自己的dev分支上干活，时不时往公共dev分支上合并。
3，版本更新时，再从公共dev分支上往master合并。

Bug 分支
修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
当手头工作没有完成时，先把工作现场"git stash"一下，然后去修复bug，修复后，
再"git stash pop"，回到工作现场。恢复的同时把stash内容也删了.
如果，用git stash apply恢复，但是恢复后，stash内容并不删除，需要用git stash drop来删除
可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
git stash apply stash@{0}


开发一个新feature，最好新建一个分支；
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。(上文有提到)

多人协作
查看远程库的信息，用git remote
用git remote -v显示更详细的信息
会显示可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。
推送分支
推送分支，就是把该分支上的所有本地提交推送到远程库。
推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：
git push origin master
git push origin dev

抓取分支
git clone git@github.com:tuouo/git.git
这是将git.git拷贝到运行当前命令的路径下，需要进入抓取的repository内。
这里是cd git
从远程库clone，默认只能看到master分支
需要其他分支，需要再创建远程origin的dev分支到本地：
git checkout -b dev origin/dev		{该语句首次不能执行，但后来可以执行了}
修改后推送如前述介绍。

git push origin dev

如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建
需要设置本地dev分支与远程origin/dev分支的链接，才能让git pull成功
git branch --set-upstream-to dev origin/dev



如果进入了深一层层次，没有出现
User ~ path(path)
~
输入q直接退出



标签管理
发布一个版本时，我们通常先在版本库中打一个标签，这样，就唯一确定了打标签时刻的版本。
将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。
所以，标签也是版本库的一个快照。
Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针，
所以，创建和删除标签都是瞬间完成的。

创建标签
首先，切换到需要打标签的分支上：
再 git tag tagName	(tagName 字母数字开头都行)
git tag 查看标签(所有的)
默认标签是打在最新提交的commit上的。 如果对历史版本打标签，需先找到commit id
git tag v0.9 450ce2e

git show tagName查看标签信息	

还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：
git tag -a v0.5 -m "tagInfo" 04253f

还可以通过-s用私钥签名一个标签：
git tag -s v0.2 -m "tagInfo" c26dc1b
签名采用PGP签名，因此，必须首先安装gpg（GnuPG），
如果没有找到gpg，或者没有gpg密钥对，就会报错：

操作标签
删除标签
git tag -d tagName
推送某个标签到远程
git push origin tagName
一次性推送全部尚未推送到远程的本地标签：
git push origin --tags
如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除,再
git push origin :refs/tags/v0.9



使用GitHub
如何参与一个开源项目呢？
问它的项目主页,点“Fork”就在自己的账号下克隆了一个该项目仓库，然后，从自己的账号下clone：
git clone git@github.com:tuouo/shadowsocks-android.git
从自己账户下clone仓库才能保证可以推送。
如对其修改，像之前一样改好后往自己的仓库里推送。
若希望官方接受修改，，可以在仓库页面发起一个pull request，以期对方接受。


自定义Git
etc.
让Git显示颜色，会让命令输出看起来更醒目
git config --global color.ui true


忽略特殊文件
不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。
所有配置文件可以直接在线浏览：https://github.com/github/gitignore

忽略文件的原则是：
1.忽略操作系统自动生成的文件，比如缩略图等；
2.忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，
那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
3.忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。
使用Windows的童鞋注意了，如果你在资源管理器里新建一个.gitignore文件，它会提示你必须输入文件名，
但是在文本编辑器里“保存”或者“另存为”就可以把文件保存为.gitignore了。

.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！

对于已经推送到远程的文件，在.gitignore文件添加相关内容后，使用命令
git rm --cached "XXX.XX"
再commit， 推送远程



配置别名
将status 取别名st，并使用别名
git config --global alias.st status
git st
--global参数是全局参数，所以别名可以在该电脑下的所以git仓库下使用。
又如：将reset HEAD操作取别名unstage
git config --global alias.unstage 'reset HEAD'
执行git unstage test.py
即 git reset HEAD test.py
也可以
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
执行 git lg

查看别名
git config --list | grep alias
或git config --get-regexp alias
取消别名 
git config --global --unset alias.st

配置文件
配置git时，如果加--global是针对当前用户起作用的，
如果不加只针对当前仓库。
每个仓库的Git配置文件放在.git/config文件中。
别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。

而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中：
配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。

git commit -a --allow-empty-message -m ''


http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000
搭建Git服务器
在远程仓库一节中，我们讲了远程仓库实际上和本地仓库没啥不同，
纯粹为了7x24小时开机并交换大家的修改。
GitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，
既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。
搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，
这样，通过几条简单的apt命令就可以完成安装。

假设你已经有sudo权限的用户账号，下面，正式开始安装。

第一步，安装git：
$ sudo apt-get install git

第二步，创建一个git用户，用来运行git服务：
$ sudo adduser git

第三步，创建证书登录：
收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，
把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。

第四步，初始化Git仓库：
先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：
$ sudo git init --bare sample.git
Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，
所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。
然后，把owner改为git：
$ sudo chown -R git:git sample.git

第五步，禁用shell登录：
出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。
找到类似下面的一行：
git:x:1001:1001:,,,:/home/git:/bin/bash
改为：
git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
这样，git用户可以正常通过ssh使用git，但无法登录shell，
因为我们为git用户指定的git-shell每次一登录就自动退出。

第六步，克隆远程仓库：
现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：
$ git clone git@server:/srv/sample.git
Cloning into 'sample'...
warning: You appear to have cloned an empty repository.
剩下的推送就简单了。

管理公钥
如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件里就是可行的。
如果团队有几百号人，就没法这么玩了，这时，可以用Gitosis来管理公钥。


管理权限
有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，
每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，
所以Git也继承了开源社区的精神，不支持权限控制。不过，因为Git支持钩子（hook），
所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。
Gitolite就是这个工具。这里我们也不介绍Gitolite了，不要把有限的生命浪费到权限斗争中。

小结
?搭建Git服务器非常简单，通常10分钟即可完成；
?要方便管理公钥，用Gitosis；
?要像SVN那样变态地控制权限，用Gitolite。